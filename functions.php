<?php
require_once __DIR__ . '/config.php';

/**
 * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ç
 * @param string $name –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param string $email Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param string $message –°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–±–ª–µ–º–æ–π
 * @param string|null $telegram_id ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 * @return string|false ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–∫–µ—Ç–∞ –∏–ª–∏ false –ø—Ä–∏ –æ—à–∏–±–∫–µ
 */
function createTicket($name, $email, $message, $telegram_id = null) 
{
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (empty($name)) {
        error_log("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.");
        return false;
    }
    
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        error_log("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email: " . htmlspecialchars($email));
        return false;
    }
    
    if (empty($message)) {
        error_log("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.");
        return false;
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –¥–ª—è —Ç–∏–∫–µ—Ç–∞
    $id = uniqid();
    $data = array(
        'id' => $id,
        'name' => htmlspecialchars($name),
        'email' => $email,
        'message' => htmlspecialchars($message),
        'status' => 'open',
        'created_at' => date('Y-m-d H:i:s'),
        'updated_at' => date('Y-m-d H:i:s'),
        'user_telegram_id' => $telegram_id // ID Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    );

    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!file_exists(TICKETS_DIR)) {
        if (!mkdir(TICKETS_DIR, 0755, true)) {
            error_log("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ç–∏–∫–µ—Ç–æ–≤");
            return false;
        }
    }

    $filePath = TICKETS_DIR . $id . '.json';
    $result = file_put_contents($filePath, json_encode($data, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE));
    
    if ($result === false) {
        error_log("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å —Ñ–∞–π–ª —Ç–∏–∫–µ—Ç–∞: " . $filePath);
        return false;
    }
    
    logEvent("–°–æ–∑–¥–∞–Ω —Ç–∏–∫–µ—Ç: " . $id);
    sendTelegramNotification("–ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç #" . $id . " –æ—Ç " . $data['name']);
    
    return $id; // –í–æ–∑–≤—Ä–∞—Ç ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–∫–µ—Ç–∞
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ç–∏–∫–µ—Ç –ø–æ ID
 */
function getTicket($id) {
    $file = TICKETS_DIR . $id . '.json';
    if (!file_exists($file)) return null;

    $data = json_decode(file_get_contents($file), true);
    if (json_last_error() !== JSON_ERROR_NONE) {
        logEvent("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞ $id: " . json_last_error_msg());
        return null;
    }

    return $data;
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Ç–∏–∫–µ—Ç–∞ –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∞–¥–º–∏–Ω–∞ —á–µ—Ä–µ–∑ Telegram
 */
function updateTicketStatus($id, $status) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø—É—Å—Ç–∏–º–æ—Å—Ç—å —Å—Ç–∞—Ç—É—Å–∞
    $allowedStatuses = ['open', 'in_progress', 'closed'];
    if (!in_array($status, $allowedStatuses)) {
        logEvent("–ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å—Ç–∞—Ç—É—Å '$status' –¥–ª—è —Ç–∏–∫–µ—Ç–∞ $id");
        return false;
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ç–∞
    $ticket = getTicket($id);
    if (!$ticket) {
        logEvent("–¢–∏–∫–µ—Ç $id –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞");
        return false;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    $oldStatus = $ticket['status'] ?? 'unknown';
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    $ticket['status'] = $status;
    $ticket['updated_at'] = date('Y-m-d H:i:s');

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    $filePath = TICKETS_DIR . $id . '.json';
    if (!file_put_contents($filePath, json_encode($ticket, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE))) {
        logEvent("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞ $id");
        return false;
    }

    // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
    logEvent("–°—Ç–∞—Ç—É—Å —Ç–∏–∫–µ—Ç–∞ $id –∏–∑–º–µ–Ω–µ–Ω: $oldStatus ‚Üí $status");
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    sendStatusNotifications($ticket, $oldStatus, $status);
    
    return true;
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
 */
function sendStatusNotifications($ticket, $oldStatus, $newStatus) {
    $ticketId = $ticket['id'];
    $statusNames = $GLOBALS['statuses'] ?? [
        'open' => '–û—Ç–∫—Ä—ã—Ç',
        'in_progress' => '–í —Ä–∞–±–æ—Ç–µ',
        'closed' => '–ó–∞–∫—Ä—ã—Ç'
    ];

    // 1. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞ (–≤ Telegram)
    $adminMessage = "üîÑ –°—Ç–∞—Ç—É—Å —Ç–∏–∫–µ—Ç–∞ #$ticketId –∏–∑–º–µ–Ω–µ–Ω\n";
    $adminMessage .= "üìä –ë—ã–ª–æ: " . ($statusNames[$oldStatus] ?? $oldStatus) . "\n";
    $adminMessage .= "üìä –°—Ç–∞–ª–æ: " . ($statusNames[$newStatus] ?? $newStatus) . "\n";
    $adminMessage .= "üë§ –ö–ª–∏–µ–Ω—Ç: " . ($ticket['name'] ?? '–ù–µ —É–∫–∞–∑–∞–Ω') . "\n";
    $adminMessage .= "üìß Email: " . ($ticket['email'] ?? '–ù–µ —É–∫–∞–∑–∞–Ω') . "\n";
    $adminMessage .= "üìù –°–æ–æ–±—â–µ–Ω–∏–µ: " . substr($ticket['message'] ?? '', 0, 100) . (strlen($ticket['message'] ?? '') > 100 ? '...' : '');

    sendTelegramNotification($adminMessage);

    // 2. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω telegram_id)
    if (!empty($ticket['user_telegram_id'])) {
        $userMessage = "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ —Ç–∏–∫–µ—Ç–∞ #$ticketId\n";
        $userMessage .= "üìä –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: " . ($statusNames[$newStatus] ?? $newStatus) . "\n\n";
        $userMessage .= "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å, –æ—Ç–ø—Ä–∞–≤–∏–≤ –º–Ω–µ –∫–æ–º–∞–Ω–¥—É:\n/status #$ticketId";
        
        sendTelegramMessage($ticket['user_telegram_id'], $userMessage);
    }
}

/**
 * –£–¥–∞–ª—è–µ—Ç —Ç–∏–∫–µ—Ç
 */
function deleteTicket($id, $confirm = false) {
    if (!$confirm) return false;

    $file = TICKETS_DIR . $id . '.json';
    if (file_exists($file)) {
        if (unlink($file)) {
            logEvent("–¢–∏–∫–µ—Ç —É–¥–∞–ª–µ–Ω: $id");
            sendTelegramNotification("–¢–∏–∫–µ—Ç #$id —É–¥–∞–ª–µ–Ω");
            return true;
        }
    }
    return false;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ç–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
 */
function getTickets($filter = 'all', $limit = 20) {
    $files = glob(TICKETS_DIR . '*.json');
    if (!$files) return [];

    $tickets = [];
    foreach ($files as $file) {
        $data = json_decode(file_get_contents($file), true);
        if (!$data) continue;

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª–µ–π
        $data['id'] = $data['id'] ?? basename($file, '.json');
        $data['status'] = $data['status'] ?? 'unknown';

        if ($filter === 'all' || $data['status'] === $filter) {
            $tickets[] = $data;
        }
    }

    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
    usort($tickets, function($a, $b) {
        return strtotime($b['created_at'] ?? '') - strtotime($a['created_at'] ?? '');
    });

    return array_slice($tickets, 0, $limit);
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–∫–µ—Ç–∞–º
 */
function getStats() {
    $files = glob(TICKETS_DIR . '*.json');
    if (!$files) return [
        'total' => 0,
        'open' => 0,
        'in_progress' => 0,
        'closed' => 0
    ];

    $stats = [
        'total' => 0,
        'open' => 0,
        'in_progress' => 0,
        'closed' => 0
    ];

    foreach ($files as $file) {
        $data = json_decode(file_get_contents($file), true);
        if (!$data) continue;

        $stats['total']++;
        $status = $data['status'] ?? 'unknown';
        if (isset($stats[$status])) {
            $stats[$status]++;
        }
    }

    return $stats;
}

/**
 * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
 */
function logEvent($message) {
    if (!file_exists(LOGS_DIR)) {
        mkdir(LOGS_DIR, 0755, true);
    }

    $logFile = LOGS_DIR . 'events.log';
    $logMessage = date('[Y-m-d H:i:s]') . ' ' . $message . PHP_EOL;
    file_put_contents($logFile, $logMessage, FILE_APPEND);
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤
 */
function getLogs($limit = 10) {
    $logFile = LOGS_DIR . 'events.log';
    if (!file_exists($logFile)) return [];

    $logs = file($logFile, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
    return array_reverse(array_slice($logs, -$limit));
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
 */
function sendTelegramMessage($chat_id, $text) {
    $bot_token = TELEGRAM_BOT_TOKEN;
    $url = "https://api.telegram.org/bot$bot_token/sendMessage";
    
    $data = [
        'chat_id' => $chat_id,
        'text' => $text,
        'parse_mode' => 'HTML'
    ];
    
    $options = [
        'http' => [
            'header' => "Content-type: application/x-www-form-urlencoded\r\n",
            'method' => 'POST',
            'content' => http_build_query($data),
            'timeout' => 5
        ]
    ];
    
    try {
        $context = stream_context_create($options);
        $result = file_get_contents($url, false, $context);
        
        if ($result === false) {
            error_log("Telegram API request failed to $chat_id");
            return false;
        }
        
        $response = json_decode($result, true);
        if (!$response['ok']) {
            error_log("Telegram API error: ".print_r($response, true));
            return false;
        }
        
        return true;
    } catch (Exception $e) {
        error_log("Telegram API Exception: ".$e->getMessage());
        return false;
    }
}

/**
 * –ü–æ–∏—Å–∫ —Ç–∏–∫–µ—Ç–æ–≤ –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ email
 */
function searchTickets($search_query) {
    $files = glob(TICKETS_DIR . '*.json');
    $matched_tickets = [];
    
    if (empty($search_query)) {
        return $matched_tickets;
    }

    foreach ($files as $file) {
        $ticket = json_decode(file_get_contents($file), true);
        if (!$ticket) continue;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        $ticket['id'] = $ticket['id'] ?? basename($file, '.json');
        $ticket['name'] = $ticket['name'] ?? '';
        $ticket['email'] = $ticket['email'] ?? '';
        $ticket['message'] = $ticket['message'] ?? '';
        $ticket['status'] = $ticket['status'] ?? 'unknown';
        $ticket['created_at'] = $ticket['created_at'] ?? '';

        // –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ email (–±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞)
        if (stripos($ticket['name'], $search_query) !== false || 
            stripos($ticket['email'], $search_query) !== false) {
            $matched_tickets[] = $ticket;
        }
    }
    
    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
    usort($matched_tickets, function($a, $b) {
        return strtotime($b['created_at']) - strtotime($a['created_at']);
    });
    
    return $matched_tickets;
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –≤ Telegram
 * @param string $message –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
 * @return bool –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏
 */
function sendTelegramNotification($message) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–Ω—Å—Ç–∞–Ω—Ç
    if (!defined('TELEGRAM_BOT_TOKEN') || !defined('TELEGRAM_ADMIN_CHAT_ID')) {
        error_log("Telegram: –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã TELEGRAM_BOT_TOKEN –∏–ª–∏ TELEGRAM_ADMIN_CHAT_ID");
        return false;
    }
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é sendTelegramMessage
    return sendTelegramMessage(TELEGRAM_ADMIN_CHAT_ID, $message);
}

// –¢–µ—Ä–º–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å CSS —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏
function terminalStyle() {
    echo '<style>
   /* –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∏–ª–∏ */
        body {
            font-family: "Courier New", monospace;
            background-color: #f5f5f5;
            color: #333;
            margin: 0;
            padding: 20px;
            line-height: 1.6;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            background-color: #fff;
            padding: 25px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            border-radius: 5px;
        }

        h1, h2, h3 {
            color: #444;
            margin-top: 0;
        }

        h1 {
            border-bottom: 1px solid #ddd;
            padding-bottom: 10px;
            margin-bottom: 20px;
            font-size: 1.8rem;
        }

        h2 {
            font-size: 1.4rem;
            margin: 25px 0 15px 0;
            padding-bottom: 8px;
            border-bottom: 1px dashed #ddd;
        }

        /* –§–æ—Ä–º—ã –∏ –∫–Ω–æ–ø–∫–∏ */
        input, textarea, select {
            background: #fff;
            color: #333;
            border: 1px solid #ccc;
            padding: 10px 12px;
            font-family: inherit;
            border-radius: 3px;
            width: 100%;
            max-width: 500px;
            box-sizing: border-box;
            font-size: 1rem;
        }

        button, .btn {
            background: #eee;
            color: #333;
            border: 1px solid #ccc;
            padding: 10px 15px;
            font-family: inherit;
            border-radius: 3px;
            cursor: pointer;
            display: inline-block;
            text-decoration: none;
            transition: all 0.3s;
            font-size: 1rem;
            margin: 5px 0;
        }

        button:hover, .btn:hover {
            background: #e0e0e0;
            border-color: #999;
        }

        /* –°–æ–æ–±—â–µ–Ω–∏—è */
        .error {
            color: #d32f2f;
            background-color: #ffebee;
            padding: 12px;
            border-radius: 3px;
            margin-bottom: 15px;
            border-left: 4px solid #d32f2f;
        }

        .alert {
            color: #2e7d32;
            background-color: #e8f5e9;
            padding: 12px;
            border-radius: 3px;
            margin-bottom: 15px;
            border-left: 4px solid #2e7d32;
        }

        /* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .stat-card {
            background: #fff;
            border: 1px solid #e0e0e0;
            padding: 20px;
            text-align: center;
            border-radius: 5px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        }

        .stat-number {
            font-size: 32px;
            font-weight: bold;
            display: block;
            margin-bottom: 8px;
            color: #555;
        }

        /* –§–∏–ª—å—Ç—Ä—ã */
        .ticket-filters {
            display: flex;
            gap: 10px;
            margin-bottom: 25px;
            flex-wrap: wrap;
        }

        .filter-btn {
            padding: 8px 15px;
            border: 1px solid #ddd;
            background: #f9f9f9;
            font-size: 0.95rem;
        }

        .filter-btn:hover {
            background: #eee;
        }

        /* –¢–∏–∫–µ—Ç—ã */
        .ticket {
            margin-bottom: 25px;
            border: 1px solid #e0e0e0;
            padding: 20px;
            border-radius: 5px;
            background: #fff;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        }

        .ticket-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
            flex-wrap: wrap;
        }

        .ticket-status {
            padding: 5px 10px;
            border-radius: 3px;
            font-size: 0.95rem;
            font-weight: bold;
        }

        .status-open { background: #e8f5e9; color: #2e7d32; }
        .status-in_progress { background: #fff8e1; color: #ff8f00; }
        .status-closed { background: #f5f5f5; color: #616161; }

        .ticket-body p {
            margin: 10px 0;
            line-height: 1.6;
        }

        .ticket-actions {
            margin-top: 20px;
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
        }

        /* –û–ø–∞—Å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ */
        .danger {
            background: #ffebee;
            border-color: #ef9a9a;
            color: #c62828;
        }

        .danger:hover {
            background: #ef9a9a;
            color: #fff;
        }

        /* –õ–æ–≥–∏ */
        .logs {
            max-height: 400px;
            overflow-y: auto;
            border: 1px solid #e0e0e0;
            padding: 15px;
            background: #fff;
            border-radius: 5px;
            font-size: 0.9rem;
        }

        .log-entry {
            padding: 10px 0;
            border-bottom: 1px solid #f5f5f5;
            font-family: "Courier New", monospace;
        }

        .log-entry:last-child {
            border-bottom: none;
        }

        /* –§—É—Ç–µ—Ä */
        .admin-footer {
            margin-top: 40px;
            padding-top: 20px;
            border-top: 1px solid #eee;
            text-align: center;
        }

        .logout {
            background: #f5f5f5;
            border-color: #bdbdbd;
            padding: 10px 20px;
        }

        .logout:hover {
            background: #e0e0e0;
        }

        /* –ü–æ–∏—Å–∫ */
        .search-box {
            margin: 20px 0;
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
        }

        .search-input {
            flex: 1;
            min-width: 200px;
        }

        /* –ú–æ–±–∏–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ */
        @media (max-width: 768px) {
            .container {
                padding: 15px;
            }
            
            h1 {
                font-size: 1.5rem;
                padding-bottom: 8px;
            }
            
            h2 {
                font-size: 1.2rem;
            }
            
            .stats-grid {
                grid-template-columns: 1fr 1fr;
                gap: 10px;
            }
            
            .stat-card {
                padding: 15px;
            }
            
            .stat-number {
                font-size: 24px;
            }
            
            .ticket {
                padding: 15px;
            }
            
            .ticket-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 10px;
            }
            
            .ticket-actions {
                flex-direction: column;
                gap: 8px;
            }
            
            button, .btn {
                width: 100%;
                text-align: center;
            }
        }

        @media (max-width: 480px) {
            body {
                padding: 10px;
            }
            
            .container {
                padding: 12px;
            }
            
            h1 {
                font-size: 1.3rem;
            }
            
            .stats-grid {
                grid-template-columns: 1fr;
            }
            
            .ticket-filters {
                flex-direction: column;
            }
            
            .filter-btn {
                width: 100%;
            }
            
            input, textarea, select {
                padding: 8px 10px;
            }
        }

        /* –ê–Ω–∏–º–∞—Ü–∏–∏ */
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .ticket {
            animation: fadeIn 0.3s ease-out;
        }

        /* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ */
        .badge {
            display: inline-block;
            padding: 3px 7px;
            font-size: 0.8rem;
            font-weight: bold;
            line-height: 1;
            color: #fff;
            text-align: center;
            white-space: nowrap;
            vertical-align: baseline;
            border-radius: 10px;
            background-color: #777;
        }

        .badge-primary { background-color: #337ab7; }
        .badge-success { background-color: #5cb85c; }
        .badge-warning { background-color: #f0ad4e; }
        .badge-danger { background-color: #d9534f; }

        /* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –±–ª–æ–∫–∏ */
        .info-box {
            padding: 15px;
            margin-bottom: 20px;
            border: 1px solid #eee;
            border-left-width: 5px;
            border-radius: 3px;
            background-color: #f9f9f9;
        }

        .info-box-info {
            border-left-color: #5bc0de;
        }

        .info-box-warning {
            border-left-color: #f0ad4e;
        }

        /* –í—Å–ø–ª—ã–≤–∞—é—â–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ */
        .tooltip {
            position: relative;
            display: inline-block;
        }

        .tooltip .tooltiptext {
            visibility: hidden;
            width: 200px;
            background-color: #555;
            color: #fff;
            text-align: center;
            border-radius: 6px;
            padding: 5px;
            position: absolute;
            z-index: 1;
            bottom: 125%;
            left: 50%;
            margin-left: -100px;
            opacity: 0;
            transition: opacity 0.3s;
            font-size: 0.8rem;
        }

        .tooltip:hover .tooltiptext {
            visibility: visible;
            opacity: 1;
        }
        
        /* –ù–æ–≤—ã–µ —É–ª—É—á—à–µ–Ω–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ */
        @media (max-width: 576px) {
            .container {
                padding: 10px;
            }
            
            h1 {
                font-size: 1.2rem;
                margin-bottom: 15px;
            }
            
            .ticket {
                padding: 12px;
                margin-bottom: 15px;
            }
            
            .ticket-actions .btn {
                padding: 8px 10px;
                font-size: 0.9rem;
            }
            
            .stats-grid {
                grid-template-columns: 1fr;
                gap: 8px;
            }
            
            .stat-card {
                padding: 12px;
            }
            
            .stat-number {
                font-size: 24px;
            }
        }
        
        /* –£–ª—É—á—à–µ–Ω–∏—è –¥–ª—è —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã */
        @media (prefers-color-scheme: dark) {
            body {
                background-color: #121212;
                color: #e0e0e0;
            }
            
            .container {
                background-color: #1e1e1e;
                box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
            }
            
            h1, h2, h3 {
                color: #ffffff;
            }
            
            .ticket {
                background-color: #2d2d2d;
                border-color: #3d3d3d;
            }
            
            input, textarea, select {
                background-color: #2d2d2d;
                color: #ffffff;
                border-color: #3d3d3d;
            }
            
            .logs {
                background-color: #252525;
                border-color: #3d3d3d;
                color: #e0e0e0;
            }
        }
    </style>';
}